sep parameter in print():
~~~~~~~~~~~~~~~~~~~~~~~
The separator between the arguments to print() function in Python is space by default (softspace feature) , 
which can be modified and can be made to any character, integer or string as per our choice.

#code for disabling the softspace feature
print('G','F','G', sep='')

#for formatting a date
print('09','12','2016', sep='-')

#another example
print('pratik','geeksforgeeks', sep='@')


Output:
~~~~~
GFG
09-12-2016
pratik@geeksforgeeks

end parameter in print():
~~~~~~~~~~~~~~~~~~~~~~~
By default Python‘s print() function ends with a newline. A programmer with C/C++ background may wonder how to print 
without a newline. Python’s print() function comes with a parameter called ‘end‘. 
By default, the value of this parameter is ‘\n’, i.e. the new line character

# ends the output with a space
print("Welcome to", end = ' ')
print("GeeksforGeeks", end= ' ')

Output:

Welcome to GeeksforGeeks


Python Type Conversion:
~~~~~~~~~~~~~~~~~~~~~~

In programming, type conversion is the process of converting data of one type to another. 

For example: converting int data to str.

There are two types of type conversion in Python.

Implicit Conversion - automatic type conversion
Explicit Conversion - manual type conversion
Python Implicit Type Conversion

In certain situations, Python automatically converts one data type to another. This is known as implicit type conversion.
   ~~~~~~~~~~~~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                   ~~~~~~~~~~~~~~~~~~~~~~~~~

Example 1: Converting integer to float
Let's see an example where Python promotes the conversion of the lower data type (integer) to the higher data type (float) to avoid data loss.

integer_number = 123
float_number = 1.23

new_number = integer_number + float_number

# display new value and resulting data type
print("Value:",new_number)
print("Data Type:",type(new_number))
Run Code
Output

Value: 124.23
Data Type: <class 'float'>
In the above example, we have created two variables: integer_number and float_number of int and float type respectively.

Then we added these two variables and stored the result in new_number.

As we can see new_number has value 124.23 and is of the float data type.

It is because Python always converts smaller data types to larger data types to avoid the loss of data.

Note:

We get TypeError, if we try to add str and int. For example, '12' + 23. Python is not able to use Implicit Conversion in such conditions.
Python has a solution for these types of situations which is known as Explicit Conversion.
Explicit Type Conversion
In Explicit Type Conversion, users convert the data type of an object to required data type.

We use the built-in functions like int(), float(), str(), etc to perform explicit type conversion.

This type of conversion is also called typecasting because the user casts (changes) the data type of the objects.

Example 2: Addition of string and integer Using Explicit Conversion
num_string = '12'
num_integer = 23

print("Data type of num_string before Type Casting:",type(num_string))

# explicit type conversion
num_string = int(num_string)

print("Data type of num_string after Type Casting:",type(num_string))

num_sum = num_integer + num_string

print("Sum:",num_sum)
print("Data type of num_sum:",type(num_sum))
Run Code
Output

Data type of num_string before Type Casting: <class 'str'>
Data type of num_string after Type Casting: <class 'int'>
Sum: 35
Data type of num_sum: <class 'int'>
In the above example, we have created two variables: num_string and num_integer with str and int type values respectively. Notice the code,

num_string = int(num_string)
Here, we have used int() to perform explicit type conversion of num_string to integer type.

After converting num_string to an integer value, Python is able to add these two variables.

Finally, we got the num_sum value i.e 35 and data type to be int.

Key Points to Remember
Type Conversion is the conversion of an object from one data type to another data type.
Implicit Type Conversion is automatically performed by the Python interpreter.
Python avoids the loss of data in Implicit Type Conversion.
Explicit Type Conversion is also called Type Casting, the data types of objects are converted using predefined functions by the user.
In Type Casting, loss of data may occur as we enforce the object to a specific data type.

Python Collections (Arrays):
~~~~~~~~~~~~~~~~~~~~~~~~~~~
There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
Dictionary is a collection which is ordered** and changeable. No duplicate members.



List:
~~~~
Lists are used to store multiple items in a single variable.

Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.

Lists are created using square brackets

Example:
~~~~~~~
Create a List:

thislist = ["apple", "banana", "cherry"]
print(thislist)

List Items
List items are ordered, changeable, and allow duplicate values.--ordered means when we print the list it will be returned in the same order at the time when we created

List items are indexed, the first item has index [0], the second item has index [1] etc.

Ordered
When we say that lists are ordered, it means that the items have a defined order, and that order will not change.

If you add new items to a list, the new items will be placed at the end of the list.

Note: There are some list methods that will change the order, but in general: the order of the items will not change.

Changeable
The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.

Allow Duplicates
Since lists are indexed, lists can have items with the same value:

Example
~~~~~~~
Lists allow duplicate values:

thislist = ["apple", "banana", "cherry", "apple", "cherry"]
print(thislist)
List Length
To determine how many items a list has, use the len() function:

Example
~~~~~~~
Print the number of items in the list:

thislist = ["apple", "banana", "cherry"]
print(len(thislist))


List Items - Data Types:
~~~~~~~~~~~~~~~~~~~~~~~
List items can be of any data type:

Example
String, int and boolean data types:

list1 = ["apple", "banana", "cherry"]
list2 = [1, 5, 7, 9, 3]
list3 = [True, False, False]
A list can contain different data types:

Example
A list with strings, integers and boolean values:

list1 = ["abc", 34, True, 40, "male"]

type():
~~~~~~
From Python's perspective, lists are defined as objects with the data type 'list':

<class 'list'>
Example
What is the data type of a list?

mylist = ["apple", "banana", "cherry"]
print(type(mylist))

Access Items:
~~~~~~~~~~~~
List items are indexed and you can access them by referring to the index number

Example:
~~~~~~~
Print the second item of the list

thislist = ["apple", "banana", "cherry"]
print(thislist[1])
Note: The first item has index 0.

Negative Indexing:
~~~~~~~~~~~~~~~~~
Negative indexing means start from the end

-1 refers to the last item, -2 refers to the second last item etc.

Example:
~~~~~~~
Print the last item of the list:

thislist = ["apple", "banana", "cherry"]
print(thislist[-1])
Range of Indexes
You can specify a range of indexes by specifying where to start and where to end the range.

When specifying a range, the return value will be a new list with the specified items.

Example:
~~~~~~~
Return the third, fourth, and fifth item:

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[2:5])
Note: The search will start at index 2 (included) and end at index 5 (not included).

Remember that the first item has index 0.

By leaving out the start value, the range will start at the first item

Example:
~~~~~~~
This example returns the items from the beginning to, but NOT including, "kiwi":

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[:4])
By leaving out the end value, the range will go on to the end of the list

Example:
~~~~~~~
This example returns the items from "cherry" to the end

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[2:])
Range of Negative Indexes
Specify negative indexes if you want to start the search from the end of the list

Example:
~~~~~~~
This example returns the items from "orange" (-4) to, but NOT including "mango" (-1)

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[-4:-1])
Check if Item Exists
To determine if a specified item is present in a list use the in keyword

Example:
~~~~~~~
Check if "apple" is present in the list:

thislist = ["apple", "banana", "cherry"]
if "apple" in thislist:
  print("Yes, 'apple' is in the fruits list")


Change Item Value:
~~~~~~~~~~~~~~~~~~
To change the value of a specific item, refer to the index number

Example:
~~~~~~~
Change the second item

thislist = ["apple", "banana", "cherry"]
thislist[1] = "blackcurrant"
print(thislist)

Change a Range of Item Values:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To change the value of items within a specific range, define a list with the new values, and refer to the range of index numbers where you want to insert the new values

Example:
~~~~~~~
Change the values "banana" and "cherry" with the values "blackcurrant" and "watermelon":

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "mango"]
thislist[1:3] = ["blackcurrant", "watermelon"]
print(thislist)

Example:
~~~~~~~~
Change the second value by replacing it with two new values

thislist = ["apple", "banana", "cherry"]
thislist[1:2] = ["blackcurrant", "watermelon"]
print(thislist)
Note: The length of the list will change when the number of items inserted does not match the number of items replaced.

If you insert less items than you replace, the new items will be inserted where you specified, and the remaining items will move accordingly:

Example:
~~~~~~~
Change the second and third value by replacing it with one value:

thislist = ["apple", "banana", "cherry"]
thislist[1:3] = ["watermelon"]
print(thislist)

Append Items:
~~~~~~~~~~~~~
To add an item to the end of the list, use the append() method

ExampleGet your own Python Server
Using the append() method to append an item:

thislist = ["apple", "banana", "cherry"]
thislist.append("orange")
print(thislist)

Insert Items:
~~~~~~~~~~~~
To insert a list item at a specified index, use the insert() method.

The insert() method inserts an item at the specified index:

Example:
~~~~~~~
Insert an item as the second position:

thislist = ["apple", "banana", "cherry"]
thislist.insert(1, "orange")
print(thislist)

Extend List:
~~~~~~~~~~~
To append elements from another list to the current list, use the extend() method.

Example:
~~~~~~~
Add the elements of tropical to thislist:

thislist = ["apple", "banana", "cherry"]
tropical = ["mango", "pineapple", "papaya"]
thislist.extend(tropical)
print(thislist)

Add Any Iterable:
~~~~~~~~~~~~~~~~~
The extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.).

Example
Add elements of a tuple to a list:

thislist = ["apple", "banana", "cherry"]
thistuple = ("kiwi", "orange")
thislist.extend(thistuple)


Remove Specified Item:
~~~~~~~~~~~~~~~~~~~~~
The remove() method removes the specified item

Example:
~~~~~~~
Remove "banana"

thislist = ["apple", "banana", "cherry"]
thislist.remove("banana")
print(thislist)

Remove Specified Index:
~~~~~~~~~~~~~~~~~~~~~~
The pop() method removes the specified index.

Example:
~~~~~~~
Remove the second item:

thislist = ["apple", "banana", "cherry"]
thislist.pop(1)
print(thislist)
If you do not specify the index, the pop() method removes the last item.

Example:
~~~~~~~~
Remove the last item:

thislist = ["apple", "banana", "cherry"]
thislist.pop()
print(thislist)

The del keyword also removes the specified index:

Example
Remove the first item:

thislist = ["apple", "banana", "cherry"]
del thislist[0]
print(thislist)

The del keyword can also delete the list completely.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Example:
Delete the entire list

thislist = ["apple", "banana", "cherry"]
del thislist

Clear the List:
~~~~~~~~~~~~~~
The clear() method empties the list.

The list still remains, but it has no content.

Example
Clear the list content:

thislist = ["apple", "banana", "cherry"]
thislist.clear()
print(thislist)

Sort List Alphanumerically:
~~~~~~~~~~~~~~~~~~~~~~~~~~
List objects have a sort() method that will sort the list alphanumerically, ascending, by default:

Example:
~~~~~~~

Sort the list alphabetically:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort()
print(thislist)

Example:
~~~~~~~

Sort the list numerically:
~~~~~~~~~~~~~~~~~~~~~~~~~~
thislist = [100, 50, 65, 82, 23]
thislist.sort()
print(thislist)


Sort Descending:
~~~~~~~~~~~~~~~
To sort descending, use the keyword argument reverse = True:

Example:
~~~~~~~~~
Sort the list descending

thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort(reverse = True)
print(thislist)

Example:
~~~~~~~~
Sort the list descending

thislist = [100, 50, 65, 82, 23]
thislist.sort(reverse = True)
print(thislist)


Tuple:
~~~~~
Tuples are used to store multiple items in a single variable.

Tuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage.

A tuple is a collection which is ordered and unchangeable.

Tuples are written with round brackets.

Tuple Items
Tuple items are ordered, unchangeable, and allow duplicate values.

Tuple items are indexed, the first item has index [0], the second item has index [1] etc.

Ordered:
~~~~~~~
When we say that tuples are ordered, it means that the items have a defined order, and that order will not change.

Unchangeable:
~~~~~~~~~~~~
Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created.

Allow Duplicates:
~~~~~~~~~~~~~~~~
Since tuples are indexed, they can have items with the same value

Example:
~~~~~~~
Tuples allow duplicate values

thistuple = ("apple", "banana", "cherry", "apple", "cherry")
print(thistuple)

Tuple Length:
~~~~~~~~~~~~
To determine how many items a tuple has, use the len() function

Example
Print the number of items in the tuple:

thistuple = ("apple", "banana", "cherry")
print(len(thistuple))

Create Tuple With One Item:
~~~~~~~~~~~~~~~~~~~~~~~~~~
To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple.

Example
One item tuple, remember the comma

thistuple = ("apple",)
print(type(thistuple))

#NOT a tuple
thistuple = ("apple")
print(type(thistuple))
Tuple Items - Data Types
Tuple items can be of any data type

Example:
~~~~~~~
String, int and boolean data types:

tuple1 = ("apple", "banana", "cherry")
tuple2 = (1, 5, 7, 9, 3)
tuple3 = (True, False, False)
A tuple can contain different data types:

Example:
~~~~~~~~
A tuple with strings, integers and boolean values:

tuple1 = ("abc", 34, True, 40, "male")

Python - Update Tuples:
~~~~~~~~~~~~~~~~~~~~~~~
Tuples are unchangeable, meaning that you cannot change, add, or remove items once the tuple is created.

But there are some workarounds.

Change Tuple Values
Once a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.

But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.

Example:
~~~~~~~

Convert the tuple into a list to be able to change it

x = ("apple", "banana", "cherry")
y = list(x)
y[1] = "kiwi"
x = tuple(y)

print(x)
Add Items
Since tuples are immutable, they do not have a built-in append() method, but there are other ways to add items to a tuple.

1. Convert into a list: Just like the workaround for changing a tuple, you can convert it into a list, add your item(s), and convert it back into a tuple.

Example
Convert the tuple into a list, add "orange", and convert it back into a tuple:

thistuple = ("apple", "banana", "cherry")
y = list(thistuple)
y.append("orange")
thistuple = tuple(y)
2. Add tuple to a tuple. You are allowed to add tuples to tuples, so if you want to add one item, (or many), create a new tuple with the item(s), and add it to the existing tuple:

Example
Create a new tuple with the value "orange", and add that tuple:

thistuple = ("apple", "banana", "cherry")
y = ("orange",)
thistuple += y

print(thistuple)
Note: When creating a tuple with only one item, remember to include a comma after the item, otherwise it will not be identified as a tuple.

Remove Items
Note: You cannot remove items in a tuple.

Tuples are unchangeable, so you cannot remove items from it, but you can use the same workaround as we used for changing and adding tuple items:

Example
Convert the tuple into a list, remove "apple", and convert it back into a tuple:

thistuple = ("apple", "banana", "cherry")
y = list(thistuple)
y.remove("apple")
thistuple = tuple(y)
Or you can delete the tuple completely:

Example
The del keyword can delete the tuple completely:

thistuple = ("apple", "banana", "cherry")
del thistuple
print(thistuple) #this will raise an error because the tuple no longer exists


Set:
~~~
Sets are used to store multiple items in a single variable.

Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage.

A set is a collection which is unordered, unchangeable*, and unindexed.

* Note: Set items are unchangeable, but you can remove items and add new items.

Sets are written with curly brackets.

Example:
~~~~~~~
Create a Set:

thisset = {"apple", "banana", "cherry"}
print(thisset)
Note: Sets are unordered, so you cannot be sure in which order the items will appear.

Set Items
Set items are unordered, unchangeable, and do not allow duplicate values.

Unordered
Unordered means that the items in a set do not have a defined order.

Set items can appear in a different order every time you use them, and cannot be referred to by index or key.

Unchangeable
Set items are unchangeable, meaning that we cannot change the items after the set has been created.

Once a set is created, you cannot change its items, but you can remove items and add new items.

Duplicates Not Allowed
Sets cannot have two items with the same value.

Example:
~~~~~~~
Duplicate values will be ignored

thisset = {"apple", "banana", "cherry", "apple"}

print(thisset)
Note: The values True and 1 are considered the same value in sets, and are treated as duplicates

Example:
~~~~~~~
True and 1 is considered the same value

thisset = {"apple", "banana", "cherry", True, 1, 2}

print(thisset)
Get the Length of a Set
To determine how many items a set has, use the len() function.

Example:
~~~~~~~~
Get the number of items in a set

thisset = {"apple", "banana", "cherry"}

print(len(thisset))
Set Items - Data Types
Set items can be of any data type:

Example:
~~~~~~~~
String, int and boolean data types

set1 = {"apple", "banana", "cherry"}
set2 = {1, 5, 7, 9, 3}
set3 = {True, False, False}
A set can contain different data types:

Example:
~~~~~~~
A set with strings, integers and boolean values

set1 = {"abc", 34, True, 40, "male"}
type()
From Python's perspective, sets are defined as objects with the data type 'set':

<class 'set'>
Example
What is the data type of a set?

myset = {"apple", "banana", "cherry"}
print(type(myset))


Access Items:
~~~~~~~~~~~~
You cannot access items in a set by referring to an index or a key.

But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword.

Example:
~~~~~~~~

Loop through the set, and print the values:

thisset = {"apple", "banana", "cherry"}

for x in thisset:
  print(x)

Example:
~~~~~~~
Check if "banana" is present in the set:

thisset = {"apple", "banana", "cherry"}

print("banana" in thisset)

Change Items
Once a set is created, you cannot change its items, but you can add new items.


Add an item to a set, using the add() method:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

thisset = {"apple", "banana", "cherry"}

thisset.add("orange")

print(thisset)

Add Sets:
~~~~~~~~
To add items from another set into the current set, use the update() method.

Example:
~~~~~~~~
Add elements from tropical into thisset:

thisset = {"apple", "banana", "cherry"}
tropical = {"pineapple", "mango", "papaya"}

thisset.update(tropical)

print(thisset)
Add Any Iterable
The object in the update() method does not have to be a set, it can be any iterable object (tuples, lists, dictionaries etc.).

Example:
~~~~~~~~
Add elements of a list to at set:

thisset = {"apple", "banana", "cherry"}
mylist = ["kiwi", "orange"]

thisset.update(mylist)

print(thisset)


Remove Item
To remove an item in a set, use the remove(), or the discard() method.

Example:
~~~~~~~
Remove "banana" by using the remove() method

thisset = {"apple", "banana", "cherry"}

thisset.remove("banana")

print(thisset)
Note: If the item to remove does not exist, remove() will raise an error.

Example:
~~~~~~~
Remove "banana" by using the discard() method

thisset = {"apple", "banana", "cherry"}

thisset.discard("banana")

print(thisset)
Note: If the item to remove does not exist, discard() will NOT raise an error.

You can also use the pop() method to remove an item, but this method will remove a random item, so you cannot be sure what item that gets removed.

The return value of the pop() method is the removed item.

Example:
~~~~~~~
Remove a random item by using the pop() method

thisset = {"apple", "banana", "cherry"}

x = thisset.pop()

print(x)

print(thisset)
Note: Sets are unordered, so when using the pop() method, you do not know which item that gets removed.

Example:
The clear() method empties the set

thisset = {"apple", "banana", "cherry"}

thisset.clear()

print(thisset)
Example
The del keyword will delete the set completely:

thisset = {"apple", "banana", "cherry"}

del thisset

print(thisset)


Dictionary:
~~~~~~~~~~~
Dictionaries are used to store data values in key:value pairs.

A dictionary is a collection which is ordered*, changeable and do not allow duplicates.


Example:
~~~~~~~
Create and print a dictionary

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)
Dictionary Items
Dictionary items are ordered, changeable, and does not allow duplicates.

Dictionary items are presented in key:value pairs, and can be referred to by using the key name.

Example
Print the "brand" value of the dictionary:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict["brand"])

Ordered or Unordered?
As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.

When we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.

Unordered means that the items does not have a defined order, you cannot refer to an item by using an index.

Changeable:
~~~~~~~~~~
Dictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.

Duplicates Not Allowed:
~~~~~~~~~~~~~~~~~~~~~~~~
Dictionaries cannot have two items with the same key

Example
Duplicate values will overwrite existing values:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964,
  "year": 2020
}
print(thisdict)
Dictionary Length
To determine how many items a dictionary has, use the len() function:

Example
Print the number of items in the dictionary:

print(len(thisdict))
Dictionary Items - Data Types
The values in dictionary items can be of any data type:

Example
String, int, boolean, and list data types:

thisdict = {
  "brand": "Ford",
  "electric": False,
  "year": 1964,
  "colors": ["red", "white", "blue"]
}
type()
From Python's perspective, dictionaries are defined as objects with the data type 'dict':

<class 'dict'>
Example
Print the data type of a dictionary:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(type(thisdict))
The dict() Constructor
It is also possible to use the dict() constructor to make a dictionary.

Example
Using the dict() method to make a dictionary:

thisdict = dict(name = "John", age = 36, country = "Norway")
print(thisdict)


Accessing Items:
~~~~~~~~~~~~~~~~
You can access the items of a dictionary by referring to its key name, inside square brackets:

Example:
~~~~~~~

Get the value of the "model" key:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = thisdict["model"]
There is also a method called get() that will give you the same result:

Example
Get the value of the "model" key:

x = thisdict.get("model")

Get Keys:
~~~~~~~~
The keys() method will return a list of all the keys in the dictionary.

Example:
~~~~~~~
Get a list of the keys

x = thisdict.keys()
The list of the keys is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the keys list.

Example:
~~~~~~~
Add a new item to the original dictionary, and see that the keys list gets updated as well

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.keys()

print(x) #before the change

car["color"] = "white"

print(x) #after the change
Get Values
The values() method will return a list of all the values in the dictionary.

Example:
~~~~~~~
Get a list of the values

x = thisdict.values()
The list of the values is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the values list.

Example:
~~~~~~~
Make a change in the original dictionary, and see that the values list gets updated as well

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.values()

print(x) #before the change

car["year"] = 2020

print(x) #after the change
Example
Add a new item to the original dictionary, and see that the values list gets updated as well:

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.values()

print(x) #before the change

car["color"] = "red"

print(x) #after the change
Get Items
The items() method will return each item in a dictionary, as tuples in a list.

Example
Get a list of the key:value pairs

x = thisdict.items()
The returned list is a view of the items of the dictionary, meaning that any changes done to the dictionary will be reflected in the items list.

Example
Make a change in the original dictionary, and see that the items list gets updated as well:

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.items()

print(x) #before the change

car["year"] = 2020

print(x) #after the change
Example
Add a new item to the original dictionary, and see that the items list gets updated as well:

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.items()

print(x) #before the change

car["color"] = "red"

print(x) #after the change

Change Values:
~~~~~~~~~~~~~
You can change the value of a specific item by referring to its key name

Example:
~~~~~~~
Change the "year" to 2018:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict["year"] = 2018

Update Dictionary:
~~~~~~~~~~~~~~~~~
The update() method will update the dictionary with the items from the given argument.

The argument must be a dictionary, or an iterable object with key:value pairs.

Example
Update the "year" of the car by using the update() method:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.update({"year": 2020})


Adding Items:
~~~~~~~~~~~~
Adding an item to the dictionary is done by using a new index key and assigning a value to it

Example:
~~~~~~~~
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict["color"] = "red"
print(thisdict)

Update Dictionary:
~~~~~~~~~~~~~~~~~
The update() method will update the dictionary with the items from a given argument. If the item does not exist, the item will be added.

The argument must be a dictionary, or an iterable object with key:value pairs.

Example
Add a color item to the dictionary by using the update() method:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.update({"color": "red"})


Removing Items:
~~~~~~~~~~~~~~
There are several methods to remove items from a dictionary

Example:
~~~~~~~
The pop() method removes the item with the specified key name:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.pop("model")
print(thisdict)

Example:
~~~~~~~
The popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead):

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.popitem()
print(thisdict)

Example:
~~~~~~~
The del keyword removes the item with the specified key name:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
del thisdict["model"]
print(thisdict)

Example:
~~~~~~~
The del keyword can also delete the dictionary completely:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
del thisdict
print(thisdict) #this will cause an error because "thisdict" no longer exists.

Example:
~~~~~~~~
The clear() method empties the dictionary:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.clear()
print(thisdict)

Copy a Dictionary:
~~~~~~~~~~~~~~~~~~
You cannot copy a dictionary simply by typing dict2 = dict1, because: dict2 will only be a reference to dict1, and changes made in dict1 will automatically 
also be made in dict2.

There are ways to make a copy, one way is to use the built-in Dictionary method copy().

Example:
~~~~~~~
Make a copy of a dictionary with the copy() method:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
mydict = thisdict.copy()
print(mydict)
Another way to make a copy is to use the built-in function dict().

Example:
~~~~~~~~
Make a copy of a dictionary with the dict() function:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
mydict = dict(thisdict)
print(mydict)

Function:
~~~~~~~~
A function is a block of code which only runs when it is called.

You can pass data, known as parameters, into a function.

A function can return data as a result.

Creating a Function:
~~~~~~~~~~~~~~~~~~~
In Python a function is defined using the def keyword

Example:
~~~~~~~
def my_function():
  print("Hello from a function")

Calling a Function:
~~~~~~~~~~~~~~~~~~
To call a function, use the function name followed by parenthesis:

Example
def my_function():
  print("Hello from a function")

my_function()

Arguments:
~~~~~~~~~~
Information can be passed into functions as arguments.

Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, 
just separate them with a comma.

The following example has a function with one argument (fname). When the function is called, we pass along a first name, 
which is used inside the function to print the full name:

Example
def my_function(fname):
  print(fname + " Refsnes")

my_function("Emil")
my_function("Tobias")
my_function("Linus")


Parameters or Arguments:
~~~~~~~~~~~~~~~~~~~~~~~																															
The terms parameter and argument can be used for the same thing: information that are passed into a function.

From a function's perspective:

A parameter is the variable listed inside the parentheses in the function definition.

An argument is the value that is sent to the function when it is called.

Number of Arguments:
~~~~~~~~~~~~~~~~~~~
By default, a function must be called with the correct number of arguments. 
Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less.

Example:
~~~~~~~
This function expects 2 arguments, and gets 2 arguments:

def my_function(fname, lname):
  print(fname + " " + lname)

my_function("Emil", "Refsnes")

If you try to call the function with 1 or 3 arguments, you will get an error:
Example
This function expects 2 arguments, but gets only 1:

def my_function(fname, lname):
  print(fname + " " + lname)

my_function("Emil")
Arbitrary Arguments, *args

If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.

This way the function will receive a tuple of arguments, and can access the items accordingly:

Example:
~~~~~~~~
If the number of arguments is unknown, add a * before the parameter name:

def my_function(*kids):
  print("The youngest child is " + kids[2])

my_function("Emil", "Tobias", "Linus")
Arbitrary Arguments are often shortened to *args in Python documentations.

Keyword Arguments
You can also send arguments with the key = value syntax.

This way the order of the arguments does not matter.

Example
def my_function(child3, child2, child1):
  print("The youngest child is " + child3)

my_function(child1 = "Emil", child2 = "Tobias", child3 = "Linus")
The phrase Keyword Arguments are often shortened to kwargs in Python documentations.

Arbitrary Keyword Arguments, **kwargs
If you do not know how many keyword arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition.

This way the function will receive a dictionary of arguments, and can access the items accordingly:

Example
If the number of keyword arguments is unknown, add a double ** before the parameter name:

def my_function(**kid):
  print("His last name is " + kid["lname"])

my_function(fname = "Tobias", lname = "Refsnes")
Arbitrary Kword Arguments are often shortened to **kwargs in Python documentations.

Default Parameter Value
The following example shows how to use a default parameter value.

If we call the function without argument, it uses the default value:

Example
def my_function(country = "Norway"):
  print("I am from " + country)

my_function("Sweden")
my_function("India")
my_function()
my_function("Brazil")
Passing a List as an Argument
You can send any data types of argument to a function (string, number, list, dictionary etc.), and it will be treated as the same data type inside the function.

E.g. if you send a List as an argument, it will still be a List when it reaches the function:

Example
def my_function(food):
  for x in food:
    print(x)

fruits = ["apple", "banana", "cherry"]

my_function(fruits)




or

A function is a block of code that performs a specific task.

Suppose, you need to create a program to create a circle and color it. You can create two functions to solve this problem:

create a circle function
create a color function
Dividing a complex problem into smaller chunks makes our program easy to understand and reuse.

Types of function:
~~~~~~~~~~~~~~~~~
There are two types of function in Python programming:

Standard library functions: These are built-in functions in Python that are available to use.
~~~~~~~~~~~~~~~~~~~~~~~~~~
User-defined functions: We can create our own functions based on our requirements.
~~~~~~~~~~~~~~~~~~~~~~

Python Function Declaration:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The syntax to declare a function is

def function_name(arguments):
    # function body 

    return
Here,

def - keyword used to declare a function
function_name - any name given to the function
arguments - any value passed to function
return (optional) - returns value from a function


Let's see an example,

def greet():
    print('Hello World!')

Here, we have created a function named greet(). It simply prints the text Hello World!.

This function doesn't have any arguments and doesn't return any values

Calling a Function in Python:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now, to use this function, we need to call it.

Here's how we can call the greet() function in Python.

# call the function
greet()

In the above example, we have created a function named greet(). Here's how the program works:

Here,

When the function is called, the control of the program goes to the function definition.
All codes inside the function are executed.
The control of the program jumps to the next statement after the function call.


Python Function Arguments:
~~~~~~~~~~~~~~~~~~~~~~~~~
As mentioned earlier, a function can also have arguments. An argument is a value that is accepted by a function. 
For example,

# function with two arguments
def add_numbers(num1, num2):
    sum = num1 + num2
    print('Sum: ',sum)

# function with no argument
def add_numbers():
    # code
If we create a function with arguments, we need to pass the corresponding values while calling them. For example,

# function call with two values
add_numbers(5, 4)

# function call with no value
add_numbers()
Here, add_numbers(5, 4) specifies that arguments num1 and num2 will get values 5 and 4 respectively.

We can also call the function by mentioning the argument name as:

add_numbers(num1 = 5, num2 = 4)
In Python, we call it Keyword Argument (or named argument). The code above is equivalent to

add_numbers(5, 4)

The return Statement in Python:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A Python function may or may not return a value. If we want our function to return some value to a function call, 
we use the return statement. For example,

def add_numbers():
    ...
    return sum
Here, we are returning the variable sum to the function call.

Note: The return statement also denotes that the function has ended. Any code after return is not executed.


Example 2: Function return Type
# function definition
def find_square(num):
    result = num * num
    return result

# function call
square = find_square(3)

print('Square:',square)

# Output: Square: 9
Run Code
In the above example, we have created a function named find_square(). The function accepts a number and returns the square of the number.

Benefits of Using Functions:
~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Code Reusable:We can use the same function multiple times in our program which makes our code reusable.
   ~~~~~~~~~~~~~


For example,

# function definition
def get_square(num):
    return num * num

for i in [1,2,3]:
    # function call
    result = get_square(i)
    print('Square of',i, '=',result)
Run Code
Output

Square of 1 = 1
Square of 2 = 4
Square of 3 = 9
In the above example, we have created the function named get_square() to calculate the square of a number. 
Here, the function is used to calculate the square of numbers from 1 to 3.

Hence, the same method is used again and again.

2. Code Readability:Functions help us break our code into chunks to make our program readable and easy to understand.
   ~~~~~~~~~~~~~~~~












































































































